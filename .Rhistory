getwd()
usethis::create_package(getwd())
use_mit_license()
usethis::use_mit_license()
#build R package
library(devtools)
library(roxygen2)
document()
roxygenise() #create man directory
#build R package
library(devtools)
library(roxygen2)
document()
roxygenise() #create man directory
pkgload::dev_help('discrepancy_logistic_growth')
#build R package
library(devtools)
library(roxygen2)
document()
roxygenise() #create man directory
parameters <- c(0.3,2,1)
simulation <- list()
# Extract information
r <- parameters[1]
K <- parameters[2]
y0 <- parameters[3]
# Simulation details
simulation$t_const <- c(5, 50)
simulation$y_const <- (K*y0)/(y0+(K-y0)*exp(-simulation$t_const*r))
simulation$K <- K
simulation$y_const
parameters
# Simulation details
simulation$t <- seq(0, max(args$input_data), length.out=100)
test <- function(x){x}
a <- list()
a$test <- test
a$test(2)
a$val <- 3
b <- a$test
b <- a$test(a)
b
a <- matrix(1, ncol=2,nrow=2)
b <- list(a, 2*a,3*a)
mean(b)
mean(unlist(b))
unlist(b)
b
install.packages("Rcompadre")
b
mat_mean(b)
library(Rcompadre)
mat_mean(b)
a <- array(1,dim=c(2,2,3))
a
b <- list(a, 2*a,3*a)
b
mat_mean(b)
mpm_mean(b)
trace(mat_mean)
trace(mat_mean,edit=TRUE)
?zero_NA
??zero_NA
trace(mat_mean,edit=TRUE)
#build R package
library(devtools)
library(roxygen2)
document()
roxygenise() #create man directory
?sample
fzero
?fzero
??fzero
install.packages(pracma )
install.packages("pracma")
use_package("parallel")
#build R package
library(devtools)
library(roxygen2)
document()
document()
roxygenise() #create man directory
use_package("parallel")
use_package("doParallel")
use_package("foreach")
use_package("MASS")
use_package("stats")
use_package("ggplot2")
use_package("pracma")
use_package("deSolve")
use_package("tidyr")
use_package("dplyr")
use_package("magrittr")
load_all()
load_all()
upper=5
lower=0
parameter_labels=NA
n_particles=10000
input_data=NA
output_data=NA
sim_func=SMCfeatures::simulations_logistic_growth
calculate_discrepancy=SMCfeatures::discrepancy_logistic_growth
log_likelihood = SMCfeatures::log_likelihood_logistic_growth
sampler=SMCfeatures::uniform_sampler
trans_f=SMCfeatures::uniform_transform
trans_finv=SMCfeatures::uniform_transform_inverse
pdf=SMCfeatures::uniform_pdf_transformed
mcmc_trials=10
dist_final=0
a_disc=0.6
a_like=0.3
c=0.01
p_acc_min=0.0001
n_cores = 1L
output_prior=FALSE
output_args=FALSE
output_discrepancy=FALSE
output_matrix=TRUE
load_all()
upper=5
lower=0
parameter_labels=NA
n_particles=10000
input_data=NA
output_data=NA
sim_func=SMCfeatures::simulations_logistic_growth
calculate_discrepancy=SMCfeatures::discrepancy_logistic_growth
log_likelihood = SMCfeatures::log_likelihood_logistic_growth
sampler=SMCfeatures::uniform_sampler
trans_f=SMCfeatures::uniform_transform
trans_finv=SMCfeatures::uniform_transform_inverse
pdf=SMCfeatures::uniform_pdf_transformed
mcmc_trials=10
dist_final=0
a_disc=0.6
a_like=0.3
c=0.01
p_acc_min=0.0001
n_cores = 1L
output_prior=FALSE
output_args=FALSE
output_discrepancy=FALSE
output_matrix=TRUE
if (n_cores == 1L){
print("The code will run on 1 cluster only (sequential).")
print("Change the parameter 'n_cores' to parallelise code")
}
# Tuning parameters
if(a_like >= a_disc){
print('WARNING: a_like must be smaller than a_disc.')
print('Code will break because you are requesting to retain %f percent of particles with low discrepancy')
print('and then to retain %f percent of particles with low discrepany and high likelihood')
}
args <- SMCfeatures::args_function(upper,
lower,
parameter_labels,
n_particles,
input_data,
output_data,
disc_func,
log_likelihood,
sampler,
trans_f,
trans_finv,
pdf,
mcmc_trials,
dist_final,
a_disc,
a_like,
c,
p_acc_min,
n_cores)
#build R package
library(devtools)
library(roxygen2)
document()
roxygenise() #create man directory
load_all()
upper=5
lower=0
parameter_labels=NA
n_particles=10000
input_data=NA
output_data=NA
sim_func=SMCfeatures::simulations_logistic_growth
calculate_discrepancy=SMCfeatures::discrepancy_logistic_growth
calculate_log_likelihood = SMCfeatures::log_likelihood_logistic_growth
sampler=SMCfeatures::uniform_sampler
trans_f=SMCfeatures::uniform_transform
trans_finv=SMCfeatures::uniform_transform_inverse
pdf=SMCfeatures::uniform_pdf_transformed
mcmc_trials=10
dist_final=0
a_disc=0.6
a_like=0.3
c=0.01
p_acc_min=0.0001
n_cores = 1L
output_prior=FALSE
output_args=FALSE
output_discrepancy=FALSE
output_matrix=TRUE
#build R package
library(devtools)
library(roxygen2)
document()
roxygenise() #create man directory
#build R package
library(devtools)
library(roxygen2)
document()
roxygenise() #create man directory
load_all()
upper=5
args <- define_args()
load_all()
define_args=SMCfeatures::define_args_logistic_growth
include_expert_constraints=TRUE
include_data_constraints=TRUE
n_particles=10000
mcmc_trials=10
discrepancy_final=0
a_disc=0.6
a_like=0.3
c=0.01
p_acc_min=0.0001
n_cores = 1L
##start testing####
args <- define_args()
#build R package
library(devtools)
library(roxygen2)
document()
roxygenise() #create man directory
#build R package
library(devtools)
library(roxygen2)
document()
roxygenise() #create man directory
load_all()
define_args=SMCfeatures::define_args_logistic_growth
include_expert_constraints=TRUE
include_data_constraints=TRUE
n_particles=10000
mcmc_trials=10
discrepancy_final=0
a_disc=0.6
a_like=0.3
c=0.01
p_acc_min=0.0001
n_cores = 1L
##start testing####
args <- define_args()
#build R package
library(devtools)
library(roxygen2)
document()
roxygenise() #create man directory
load_all()
define_args=SMCfeatures::define_args_logistic_growth
include_expert_constraints=TRUE
include_data_constraints=TRUE
n_particles=10000
mcmc_trials=10
discrepancy_final=0
a_disc=0.6
a_like=0.3
c=0.01
p_acc_min=0.0001
n_cores = 1L
##start testing####
args <- define_args()
View(args)
##testing SMC_combined####
ESS <- a_like*n_particles # target effective sample size based on retaining a_like% of particles
cl <- parallel::makeCluster(n_cores)
doParallel::registerDoParallel(cl)
#sample priors
param_vals <- foreach::foreach(i = 1:n_particles, .combine="rbind") %dopar% {
args$sampler(args)
}
args$sampler(args)
